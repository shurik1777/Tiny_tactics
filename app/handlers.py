# app/handlers.py
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.builders import create_main_menu_keyboard, create_tactic_selection_keyboard
from database.db_operations import load_user_data, save_user_data
from logic.state_management import select_tactic
from logic.calculations import calculate_battle_result
import logging

logger = logging.getLogger(__name__)
router = Router()


def setup_handlers(dp):
    dp.include_router(router)


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
    attacker_data, defender_data = await load_user_data(user_id)
    if not attacker_data or not defender_data:
        attacker_data = {
            "STR": 10, "INT": 10, "END": 10, "TEC": 10, "DEF": 10, "MRL": 10,
            "tactic": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ö–æ–¥–µ–∫—Å", "selected_skills": [], "achievements": []
        }
        defender_data = {
            "STR": 10, "INT": 10, "END": 10, "TEC": 10, "DEF": 10, "MRL": 10,
            "tactic": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ö–æ–¥–µ–∫—Å", "selected_skills": [], "achievements": []
        }
        await save_user_data(user_id, attacker_data, defender_data)

    await state.set_data({"attacker": attacker_data, "defender": defender_data})
    keyboard = create_main_menu_keyboard()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ä–∞–∂–µ–Ω–∏–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data in ["setup_attacker", "setup_defender"])
async def setup_entity(callback: types.CallbackQuery, state: FSMContext):
    entity = "attacker" if callback.data == "setup_attacker" else "defender"
    data = await state.get_data()
    entity_data = data.get(entity, {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_tactic_selection_keyboard(["–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ö–æ–¥–µ–∫—Å", "–°–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π –ù–∞—Ç–∏—Å–∫", "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –£—Ä–∞–≥–∞–Ω"],
                                                [entity_data.get("tactic")])
    stats_text = (
        f"‚öîÔ∏è –¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {entity}:\n"
        f"STR: {entity_data.get('STR', 0)}\n"
        f"INT: {entity_data.get('INT', 0)}\n"
        f"END: {entity_data.get('END', 0)}\n"
        f"TEC: {entity_data.get('TEC', 0)}\n"
        f"DEF: {entity_data.get('DEF', 0)}\n"
        f"MRL: {entity_data.get('MRL', 0)}\n"
        f"–¢–∞–∫—Ç–∏–∫–∞: {entity_data.get('tactic', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"–ê—á–∏–≤–∫–∏: {', '.join(entity_data.get('achievements', [])) or '–ù–µ—Ç'}"
    )

    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "calculate_result")
async def calculate_result_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    attacker = data.get("attacker")
    defender = data.get("defender")

    if not attacker or not defender:
        logger.warning(f"–î–∞–Ω–Ω—ã–µ FSM –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        attacker, defender = await load_user_data(user_id)

    if not attacker or not defender:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")
        await callback.answer()
        return

    logger.info(f"–î–∞–Ω–Ω—ã–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ: {attacker}, –î–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è: {defender}")

    result = calculate_battle_result(attacker, defender)

    result_text = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∂–µ–Ω–∏—è!\n\n"
        f"üéâ {result['winner'].capitalize()} –ø–æ–±–µ–∂–¥–∞–µ—Ç! üéâ\n\n"
        f"‚öîÔ∏è –°–∏–ª–∞ –∞—Ç–∞–∫–∏: {result['attack_power']}\n"
        f"üõ°Ô∏è –°–∏–ª–∞ –∑–∞—â–∏—Ç—ã: {result['defense_power']}\n"
        f"üî¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–ª: 1:{round(result['attack_power'] / result['defense_power'], 2)}\n"
        f"üíî –ü–æ—Ç–µ—Ä–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏: {result['population_loss']}%\n\n"
        f"‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏:\n"
        f"–ê—Ç–∞–∫—É—é—â–∏–π: {attacker['tactic']}\n"
        f"–ó–∞—â–∏—â–∞—é—â–∏–π—Å—è: {defender['tactic']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="clear_result")]
    ])

    await callback.message.edit_text(result_text, reply_markup=keyboard)

    await asyncio.sleep(0.5)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("select_tactic_"))
async def select_tactic_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–∫—Ç–∏–∫–∏ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º."""
    tactic_name = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏ –∏–∑ callback_data
    user_id = callback.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ FSM
    data = await state.get_data()
    entity = "attacker" if "attacker" in data else "defender"
    entity_data = data.get(entity, {})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–∫—É
    previous_tactic = entity_data.get("tactic", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    entity_data["tactic"] = tactic_name

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data({entity: entity_data})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    if entity == "attacker":
        await save_user_data(user_id, entity_data, data.get("defender", {}))
    else:
        await save_user_data(user_id, data.get("attacker", {}), entity_data)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logger.info(f"–¢–∞–∫—Ç–∏–∫–∞ –¥–ª—è {entity} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å {previous_tactic} –Ω–∞ {tactic_name}. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {entity_data}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"–¢–∞–∫—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {tactic_name}\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=None  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )
    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    await callback.answer("–í—ã–±–æ—Ä —Ç–∞–∫—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

